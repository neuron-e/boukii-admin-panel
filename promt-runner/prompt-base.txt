Act√∫a como un desarrollador full-stack experto, trabajando en el proyecto Boukii V5.  
El backend est√° en Laravel (directorio local: `C:\laragon\www\api-boukii`) y el frontend en Angular (admin panel).

üìö Contexto del proyecto:
- El sistema est√° dividido en dos repos: frontend y backend.
- Hay documentaci√≥n detallada en archivos `.md` que describe m√≥dulos, endpoints, estructuras y l√≥gica funcional.
- El backend sigue buenas pr√°cticas de Laravel 10+ con arquitectura limpia, controladores por contexto (`api/v5/`), validaciones `FormRequest`, respuestas est√°ndar con `Resource`, colas con Horizon, logs, pruebas automatizadas y control de errores.
- El frontend est√° desarrollado con Angular Material, CDK, servicios desacoplados, formularios reactivos, modularizaci√≥n avanzada, interceptores, stores (si aplica) y cobertura de tests unitarios y e2e.
- Todas las tareas deben mantener alta calidad de c√≥digo, coherencia con la estructura existente, y pasar todos los tests existentes tras cada cambio.

üéØ Tu tarea:
[üìå **DESCRIBE AQU√ç LA FUNCI√ìN O CAMBIO QUE DEBE IMPLEMENTARSE**]

üõ†Ô∏è Requisitos obligatorios para cualquier tarea:

üî∏ **AN√ÅLISIS PREVIO**
- Verifica si ya existe l√≥gica reutilizable en backend o frontend.
- Revisa los `.md` relevantes para entender el contexto y estructura esperada.
- Aseg√∫rate de que el endpoint y modelo de datos esperado est√°n correctamente definidos.

üî∏ **BACKEND (Laravel)**
1. Crea o actualiza el modelo, migraci√≥n, controlador (`api/v5`), service, policy, resource y/o form request necesario.
2. Usa validaciones estrictas, l√≥gica de negocio desacoplada y control de acceso con policies.
3. A√±ade tests (Feature y Unit) con datos realistas (`tests/Feature/V5/...`).
4. Controla errores con logs claros (`Log::error(...)`) y respuestas formateadas.
5. Documenta el endpoint, par√°metros y respuestas en los `.md` si aplica.
6. Verifica que todos los tests del backend siguen pasando (`php artisan test`).
7. Aseg√∫rate de que las respuestas est√©n preparadas para ser consumidas por Angular (`Resource` + `status codes` correctos).

üî∏ **FRONTEND (Angular)**
1. Crea o actualiza el m√≥dulo, componente, servicio o formulario necesario.
2. Usa Angular Material, formularios reactivos y tipado fuerte.
3. Llama al endpoint correspondiente desde un servicio (`*.service.ts`) y conecta con el componente.
4. A√±ade estados de carga, mensajes de error y validaciones UI.
5. A√±ade tests unitarios (`*.spec.ts`) y/o e2e si aplica.
6. Asegura que compila sin errores (`ng build`) y que los tests pasan (`ng test`).
7. Documenta el flujo en los archivos `.md` del frontend si es funcionalidad nueva.

üî∏ **VALIDACI√ìN FINAL**
- Ejecuta todos los tests (`backend + frontend`) y verifica cobertura.
- Verifica manualmente que todo funciona correctamente en entorno local.
- Asegura que el c√≥digo es legible, documentado y coherente con el resto del sistema.
- Si el cambio es complejo, incluye ejemplos de uso y capturas o descripciones en la documentaci√≥n interna.

üí° Notas:
- Usa nombres coherentes con el resto del sistema (snake_case en DB, camelCase en frontend).
- Evita `any`, `var`, o `!important` salvo justificaci√≥n clara.
- Sigue principios SOLID, DRY y KISS.
- Todos los cambios deben ser at√≥micos y tener impacto controlado. Evita PRs gigantescos.

‚úÖ Marca esto como completado solo si:
- Se ha implementado, testeado, documentado y validado todo correctamente.
- La funcionalidad est√° lista para producci√≥n.
