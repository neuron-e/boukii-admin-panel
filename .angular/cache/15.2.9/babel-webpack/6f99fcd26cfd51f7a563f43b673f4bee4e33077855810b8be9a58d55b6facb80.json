{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/boukii/boukii-admin-panel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getFirestore } from '@angular/fire/firestore';\nimport { addDoc, doc, getDoc, updateDoc, collection } from 'firebase/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/router\";\nexport class LangService {\n  constructor(matSnackBar, router) {\n    this.matSnackBar = matSnackBar;\n    this.router = router;\n  }\n  getLangById(langId) {\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      const langRef = doc(db, 'languages', langId);\n      const langSnap = yield getDoc(langRef);\n      if (langSnap.exists()) {\n        return langSnap.data();\n      } else {\n        console.log('No such document!');\n      }\n    })();\n  }\n  createLang(langData) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      try {\n        yield addDoc(collection(db, 'languages'), langData);\n        _this.matSnackBar.open(\"El idioma se ha creado correctamente\", 'CERRAR', {\n          duration: 3000\n        });\n        _this.router.navigate(['language']);\n        console.log('Language created successfully');\n      } catch (error) {\n        console.error('Error creating language:', error);\n      }\n    })();\n  }\n  updateLang(langId, langData) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      try {\n        const langRef = doc(db, 'languages', langId);\n        yield updateDoc(langRef, langData);\n        _this2.matSnackBar.open(\"El idioma se ha modificado correctamente\", 'CERRAR', {\n          duration: 3000\n        });\n        _this2.router.navigate(['language']);\n        console.log('Language updated successfully');\n      } catch (error) {\n        console.error('Error updating language:', error);\n      }\n    })();\n  }\n}\nLangService.ɵfac = function LangService_Factory(t) {\n  return new (t || LangService)(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i2.Router));\n};\nLangService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LangService,\n  factory: LangService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,YAAY,QAAQ,yBAAyB;AAGtD,SAASC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,QAAQ,oBAAoB;;;;AAK/E,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAElEC,WAAW,CAACC,MAAc;IAAA;MAC9B,MAAMC,EAAE,GAAGZ,YAAY,EAAE;MAEzB,MAAMa,OAAO,GAAGX,GAAG,CAACU,EAAE,EAAE,WAAW,EAAED,MAAM,CAAC;MAC5C,MAAMG,QAAQ,SAASX,MAAM,CAACU,OAAO,CAAC;MAEtC,IAAIC,QAAQ,CAACC,MAAM,EAAE,EAAE;QACrB,OAAOD,QAAQ,CAACE,IAAI,EAAE;OACvB,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;IACjC;EACH;EAEMC,UAAU,CAACC,QAAa;IAAA;IAAA;MAC5B,MAAMR,EAAE,GAAGZ,YAAY,EAAE;MAEzB,IAAI;QACF,MAAMC,MAAM,CAACI,UAAU,CAACO,EAAE,EAAE,WAAW,CAAC,EAAEQ,QAAQ,CAAC;QAEnD,KAAI,CAACZ,WAAW,CAACa,IAAI,CAAC,sCAAsC,EAAE,QAAQ,EAAE;UAACC,QAAQ,EAAE;QAAI,CAAC,CAAC;QACzF,KAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QAClCN,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;OAC7C,CAAC,OAAOM,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;;IACjD;EACH;EAEMC,UAAU,CAACd,MAAc,EAAES,QAAa;IAAA;IAAA;MAC5C,MAAMR,EAAE,GAAGZ,YAAY,EAAE;MAEzB,IAAI;QACF,MAAMa,OAAO,GAAGX,GAAG,CAACU,EAAE,EAAE,WAAW,EAAED,MAAM,CAAC;QAC5C,MAAMP,SAAS,CAACS,OAAO,EAAEO,QAAQ,CAAC;QAElC,MAAI,CAACZ,WAAW,CAACa,IAAI,CAAC,0CAA0C,EAAE,QAAQ,EAAE;UAACC,QAAQ,EAAE;QAAI,CAAC,CAAC;QAC7F,MAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QAClCN,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;OAC7C,CAAC,OAAOM,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;;IACjD;EACH;;AA3CWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["getFirestore","addDoc","doc","getDoc","updateDoc","collection","LangService","constructor","matSnackBar","router","getLangById","langId","db","langRef","langSnap","exists","data","console","log","createLang","langData","open","duration","navigate","error","updateLang","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\boukii\\boukii-admin-panel\\src\\service\\langService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { getFirestore } from '@angular/fire/firestore';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { addDoc, doc, getDoc, updateDoc, collection } from 'firebase/firestore';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LangService {\r\n  constructor(private matSnackBar: MatSnackBar, private router: Router) { }\r\n\r\n  async getLangById(langId: string) {\r\n    const db = getFirestore();\r\n\r\n    const langRef = doc(db, 'languages', langId);\r\n    const langSnap = await getDoc(langRef);\r\n\r\n    if (langSnap.exists()) {\r\n      return langSnap.data();\r\n    } else {\r\n      console.log('No such document!');\r\n    }\r\n  }\r\n\r\n  async createLang(langData: any) {\r\n    const db = getFirestore();\r\n\r\n    try {\r\n      await addDoc(collection(db, 'languages'), langData);\r\n\r\n      this.matSnackBar.open(\"El idioma se ha creado correctamente\", 'CERRAR', {duration: 3000});\r\n      this.router.navigate(['language']);\r\n      console.log('Language created successfully');\r\n    } catch (error) {\r\n      console.error('Error creating language:', error);\r\n    }\r\n  }\r\n\r\n  async updateLang(langId: string, langData: any) {\r\n    const db = getFirestore();\r\n\r\n    try {\r\n      const langRef = doc(db, 'languages', langId);\r\n      await updateDoc(langRef, langData);\r\n\r\n      this.matSnackBar.open(\"El idioma se ha modificado correctamente\", 'CERRAR', {duration: 3000});\r\n      this.router.navigate(['language']);\r\n      console.log('Language updated successfully');\r\n    } catch (error) {\r\n      console.error('Error updating language:', error);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}