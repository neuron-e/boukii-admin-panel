{"ast":null,"code":"import { asapScheduler } from 'rxjs';\n// @ts-ignore\nimport ApexCharts from 'apexcharts';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"chart\"];\nexport class ChartComponent {\n  constructor(cd, ngZone) {\n    this.cd = cd;\n    this.ngZone = ngZone;\n    this.autoUpdateSeries = true;\n  }\n  ngOnInit() {\n    asapScheduler.schedule(() => {\n      this._createElement();\n    });\n  }\n  ngOnChanges(changes) {\n    asapScheduler.schedule(() => {\n      if (this.autoUpdateSeries && Object.keys(changes).filter(c => c !== 'series').length === 0) {\n        this.chart.updateSeries(this.series, true);\n        return;\n      }\n      this._createElement();\n    });\n  }\n  render() {\n    return this.chart.render();\n  }\n  _createElement() {\n    if (this.series) {\n      this.options.series = this.series;\n    }\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    this.ngZone.runOutsideAngular(() => {\n      this.chart = new ApexCharts(this.chartElement.nativeElement, this.options);\n      this.render();\n    });\n  }\n}\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"vex-chart\"]],\n  viewQuery: function ChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartElement = _t.first);\n    }\n  },\n  inputs: {\n    options: \"options\",\n    series: \"series\",\n    autoUpdateSeries: \"autoUpdateSeries\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"chart\", \"\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});","map":{"version":3,"mappings":"AAYA,SAASA,aAAa,QAAQ,MAAM;AACpC;AACA,OAAOC,UAAU,MAAM,YAAY;;;AAiCnC,OAAM,MAAOC,cAAc;EAQzBC,YAAoBC,EAAqB,EACrBC,MAAc;IADd,OAAE,GAAFD,EAAE;IACF,WAAM,GAANC,MAAM;IALjB,qBAAgB,GAAG,IAAI;EAKK;EAGrCC,QAAQ;IACNN,aAAa,CAACO,QAAQ,CAAC,MAAK;MAC1B,IAAI,CAACC,cAAc,EAAE;IACvB,CAAC,CAAC;EACJ;EAEAC,WAAW,CAACC,OAAsB;IAChCV,aAAa,CAACO,QAAQ,CAAC,MAAK;MAC1B,IAAI,IAAI,CAACI,gBAAgB,IAAIC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAK,QAAQ,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;QAC1F,IAAI,CAACC,KAAK,CAACC,YAAY,CAAC,IAAI,CAACC,MAAM,EAAE,IAAI,CAAC;QAC1C;;MAGF,IAAI,CAACX,cAAc,EAAE;IACvB,CAAC,CAAC;EACJ;EAEOY,MAAM;IACX,OAAO,IAAI,CAACH,KAAK,CAACG,MAAM,EAAE;EAC5B;EAEQZ,cAAc;IACpB,IAAI,IAAI,CAACW,MAAM,EAAE;MACf,IAAI,CAACE,OAAO,CAACF,MAAM,GAAG,IAAI,CAACA,MAAM;;IAGnC,IAAI,IAAI,CAACF,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACK,OAAO,EAAE;;IAGtB,IAAI,CAACjB,MAAM,CAACkB,iBAAiB,CAAC,MAAK;MACjC,IAAI,CAACN,KAAK,GAAG,IAAIhB,UAAU,CACzB,IAAI,CAACuB,YAAY,CAACC,aAAa,EAC/B,IAAI,CAACJ,OAAO,CACb;MAED,IAAI,CAACD,MAAM,EAAE;IACf,CAAC,CAAC;EACJ;;AAlDWlB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAwB;EAAAC;IAAA;;;;;;;;;;;;;;;;;;;MAJvBC,+BAAkB","names":["asapScheduler","ApexCharts","ChartComponent","constructor","cd","ngZone","ngOnInit","schedule","_createElement","ngOnChanges","changes","autoUpdateSeries","Object","keys","filter","c","length","chart","updateSeries","series","render","options","destroy","runOutsideAngular","chartElement","nativeElement","selectors","viewQuery","i0"],"sourceRoot":"","sources":["D:\\Projects\\el-sotano-backoffice\\src\\@vex\\components\\chart\\chart.component.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { asapScheduler } from 'rxjs';\n// @ts-ignore\nimport ApexCharts from 'apexcharts';\n\nexport interface ApexOptions {\n  annotations?: ApexAnnotations;\n  chart?: ApexChart;\n  colors?: any[];\n  dataLabels?: ApexDataLabels;\n  fill?: ApexFill;\n  grid?: ApexGrid;\n  labels?: string[] | number[];\n  legend?: ApexLegend;\n  markers?: ApexMarkers;\n  noData?: ApexNoData;\n  plotOptions?: ApexPlotOptions;\n  responsive?: ApexResponsive[];\n  series?: ApexAxisChartSeries | ApexNonAxisChartSeries;\n  states?: ApexStates;\n  stroke?: ApexStroke;\n  subtitle?: ApexTitleSubtitle;\n  theme?: ApexTheme;\n  title?: ApexTitleSubtitle;\n  tooltip?: ApexTooltip;\n  xaxis?: ApexXAxis;\n  yaxis?: ApexYAxis | ApexYAxis[];\n}\n\n@Component({\n  selector: 'vex-chart',\n  template: `\n    <div #chart></div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartComponent implements OnInit, OnChanges {\n\n  @Input() options: ApexOptions;\n  @Input() series: ApexAxisChartSeries | ApexNonAxisChartSeries;\n  @Input() autoUpdateSeries = true;\n  public chart: ApexCharts;\n  @ViewChild('chart', { static: true }) private chartElement: ElementRef;\n\n  constructor(private cd: ChangeDetectorRef,\n              private ngZone: NgZone) {}\n\n\n  ngOnInit() {\n    asapScheduler.schedule(() => {\n      this._createElement();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    asapScheduler.schedule(() => {\n      if (this.autoUpdateSeries && Object.keys(changes).filter(c => c !== 'series').length === 0) {\n        this.chart.updateSeries(this.series, true);\n        return;\n      }\n\n      this._createElement();\n    });\n  }\n\n  public render(): Promise<void> {\n    return this.chart.render();\n  }\n\n  private _createElement() {\n    if (this.series) {\n      this.options.series = this.series;\n    }\n\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    this.ngZone.runOutsideAngular(() => {\n      this.chart = new ApexCharts(\n        this.chartElement.nativeElement,\n        this.options\n      );\n\n      this.render();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}