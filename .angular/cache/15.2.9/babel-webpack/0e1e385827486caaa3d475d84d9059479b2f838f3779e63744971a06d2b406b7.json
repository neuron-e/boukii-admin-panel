{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/boukii/boukii-admin-panel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getFirestore } from '@angular/fire/firestore';\nimport { addDoc, doc, getDoc, updateDoc, collection } from 'firebase/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/router\";\nexport class CrudService {\n  constructor(matSnackBar, router) {\n    this.matSnackBar = matSnackBar;\n    this.router = router;\n  }\n  get(id, model) {\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      const langRef = doc(db, model, id);\n      const langSnap = yield getDoc(langRef);\n      if (langSnap.exists()) {\n        return langSnap.data();\n      } else {\n        console.log('No such document!');\n      }\n    })();\n  }\n  create(data, model, route) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      try {\n        yield addDoc(collection(db, model), data);\n        _this.matSnackBar.open(\"El registro se ha creado correctamente\", 'CERRAR', {\n          duration: 3000\n        });\n        _this.router.navigate([route]);\n      } catch (error) {\n        console.error('Error creating language:', error);\n      }\n    })();\n  }\n  update(id, data, model, route) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      try {\n        const langRef = doc(db, model, id);\n        yield updateDoc(langRef, data);\n        _this2.matSnackBar.open(\"El registro se ha modificado correctamente\", 'CERRAR', {\n          duration: 3000\n        });\n        _this2.router.navigate([route]);\n        console.log('Language updated successfully');\n      } catch (error) {\n        console.error('Error updating language:', error);\n      }\n    })();\n  }\n}\nCrudService.ɵfac = function CrudService_Factory(t) {\n  return new (t || CrudService)(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i2.Router));\n};\nCrudService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CrudService,\n  factory: CrudService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,YAAY,QAAQ,yBAAyB;AAGtD,SAASC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,QAAQ,oBAAoB;;;;AAK/E,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAElEC,GAAG,CAACC,EAAU,EAAEC,KAAa;IAAA;MACjC,MAAMC,EAAE,GAAGb,YAAY,EAAE;MAEzB,MAAMc,OAAO,GAAGZ,GAAG,CAACW,EAAE,EAAED,KAAK,EAAED,EAAE,CAAC;MAClC,MAAMI,QAAQ,SAASZ,MAAM,CAACW,OAAO,CAAC;MAEtC,IAAIC,QAAQ,CAACC,MAAM,EAAE,EAAE;QACrB,OAAOD,QAAQ,CAACE,IAAI,EAAE;OACvB,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;IACjC;EACH;EAEMC,MAAM,CAACH,IAAS,EAAEL,KAAa,EAAES,KAAa;IAAA;IAAA;MAClD,MAAMR,EAAE,GAAGb,YAAY,EAAE;MAEzB,IAAI;QACF,MAAMC,MAAM,CAACI,UAAU,CAACQ,EAAE,EAAED,KAAK,CAAC,EAAEK,IAAI,CAAC;QAEzC,KAAI,CAACT,WAAW,CAACc,IAAI,CAAC,wCAAwC,EAAE,QAAQ,EAAE;UAACC,QAAQ,EAAE;QAAI,CAAC,CAAC;QAC3F,KAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAACH,KAAK,CAAC,CAAC;OAC9B,CAAC,OAAOI,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;;IACjD;EACH;EAEMC,MAAM,CAACf,EAAU,EAAEM,IAAS,EAAEL,KAAa,EAAES,KAAa;IAAA;IAAA;MAC9D,MAAMR,EAAE,GAAGb,YAAY,EAAE;MAEzB,IAAI;QACF,MAAMc,OAAO,GAAGZ,GAAG,CAACW,EAAE,EAAED,KAAK,EAAED,EAAE,CAAC;QAClC,MAAMP,SAAS,CAACU,OAAO,EAAEG,IAAI,CAAC;QAE9B,MAAI,CAACT,WAAW,CAACc,IAAI,CAAC,4CAA4C,EAAE,QAAQ,EAAE;UAACC,QAAQ,EAAE;QAAI,CAAC,CAAC;QAC/F,MAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAACH,KAAK,CAAC,CAAC;QAC7BH,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;OAC7C,CAAC,OAAOM,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;;IACjD;EACH;;AA1CWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["getFirestore","addDoc","doc","getDoc","updateDoc","collection","CrudService","constructor","matSnackBar","router","get","id","model","db","langRef","langSnap","exists","data","console","log","create","route","open","duration","navigate","error","update","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\boukii\\boukii-admin-panel\\src\\service\\crudService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { getFirestore } from '@angular/fire/firestore';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { addDoc, doc, getDoc, updateDoc, collection } from 'firebase/firestore';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CrudService {\r\n  constructor(private matSnackBar: MatSnackBar, private router: Router) { }\r\n\r\n  async get(id: string, model: string) {\r\n    const db = getFirestore();\r\n\r\n    const langRef = doc(db, model, id);\r\n    const langSnap = await getDoc(langRef);\r\n\r\n    if (langSnap.exists()) {\r\n      return langSnap.data();\r\n    } else {\r\n      console.log('No such document!');\r\n    }\r\n  }\r\n\r\n  async create(data: any, model: string, route: string) {\r\n    const db = getFirestore();\r\n\r\n    try {\r\n      await addDoc(collection(db, model), data);\r\n\r\n      this.matSnackBar.open(\"El registro se ha creado correctamente\", 'CERRAR', {duration: 3000});\r\n      this.router.navigate([route]);\r\n    } catch (error) {\r\n      console.error('Error creating language:', error);\r\n    }\r\n  }\r\n\r\n  async update(id: string, data: any, model: string, route: string) {\r\n    const db = getFirestore();\r\n\r\n    try {\r\n      const langRef = doc(db, model, id);\r\n      await updateDoc(langRef, data);\r\n\r\n      this.matSnackBar.open(\"El registro se ha modificado correctamente\", 'CERRAR', {duration: 3000});\r\n      this.router.navigate([route]);\r\n      console.log('Language updated successfully');\r\n    } catch (error) {\r\n      console.error('Error updating language:', error);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}