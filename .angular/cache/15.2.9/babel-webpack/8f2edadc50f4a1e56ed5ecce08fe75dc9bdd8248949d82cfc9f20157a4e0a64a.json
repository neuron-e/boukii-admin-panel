{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/boukii/boukii-admin-panel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getAuth } from '@angular/fire/auth';\nimport { getFirestore } from '@angular/fire/firestore';\nimport { addDoc, doc, getDoc, collection } from 'firebase/firestore';\nimport { createUserWithEmailAndPassword } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/router\";\nexport class UserService {\n  constructor(matSnackBar, router) {\n    this.matSnackBar = matSnackBar;\n    this.router = router;\n  }\n  getLangById(langId) {\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      const langRef = doc(db, 'users', langId);\n      const langSnap = yield getDoc(langRef);\n      if (langSnap.exists()) {\n        return langSnap.data();\n      } else {\n        console.log('No such document!');\n      }\n    })();\n  }\n  createUser(userData) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      try {\n        try {\n          const auth = getAuth();\n          yield createUserWithEmailAndPassword(auth, userData.email, userData.password);\n        } catch (error) {\n          console.error('Error during registration:', error);\n        }\n        yield addDoc(collection(db, 'users'), {\n          name: userData.name,\n          surname: userData.surname,\n          email: userData.email,\n          rol: userData.rol\n        });\n        _this.matSnackBar.open(\"El usuario se ha creado correctamente\", 'CERRAR', {\n          duration: 3000\n        });\n        _this.router.navigate(['user']);\n        console.log('User created successfully');\n      } catch (error) {\n        console.error('Error creating user:', error);\n      }\n    })();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i2.Router));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,YAAY,QAAQ,yBAAyB;AAGtD,SAASC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAaC,UAAU,QAAO,oBAAoB;AAC9E,SAASC,8BAA8B,QAAyB,oBAAoB;;;;AAKpF,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAElEC,WAAW,CAACC,MAAc;IAAA;MAC9B,MAAMC,EAAE,GAAGZ,YAAY,EAAE;MAEzB,MAAMa,OAAO,GAAGX,GAAG,CAACU,EAAE,EAAE,OAAO,EAAED,MAAM,CAAC;MACxC,MAAMG,QAAQ,SAASX,MAAM,CAACU,OAAO,CAAC;MAEtC,IAAIC,QAAQ,CAACC,MAAM,EAAE,EAAE;QACrB,OAAOD,QAAQ,CAACE,IAAI,EAAE;OACvB,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;IACjC;EACH;EAEMC,UAAU,CAACC,QAAa;IAAA;IAAA;MAC5B,MAAMR,EAAE,GAAGZ,YAAY,EAAE;MAEzB,IAAI;QAEF,IAAI;UACF,MAAMqB,IAAI,GAAGtB,OAAO,EAAE;UACtB,MAAMM,8BAA8B,CAACgB,IAAI,EAAED,QAAQ,CAACE,KAAK,EAAEF,QAAQ,CAACG,QAAQ,CAAC;SAC9E,CAAC,OAAOC,KAAK,EAAE;UACdP,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;;QAGpD,MAAMvB,MAAM,CAACG,UAAU,CAACQ,EAAE,EAAE,OAAO,CAAC,EAAE;UAACa,IAAI,EAAEL,QAAQ,CAACK,IAAI;UAAEC,OAAO,EAAEN,QAAQ,CAACM,OAAO;UAAEJ,KAAK,EAAEF,QAAQ,CAACE,KAAK;UAAEK,GAAG,EAAEP,QAAQ,CAACO;QAAG,CAAC,CAAC;QAEjI,KAAI,CAACnB,WAAW,CAACoB,IAAI,CAAC,uCAAuC,EAAE,QAAQ,EAAE;UAACC,QAAQ,EAAE;QAAI,CAAC,CAAC;QAC1F,KAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;QAC9Bb,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;OACzC,CAAC,OAAOM,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;;IAC7C;EACH;;AApCWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["getAuth","getFirestore","addDoc","doc","getDoc","collection","createUserWithEmailAndPassword","UserService","constructor","matSnackBar","router","getLangById","langId","db","langRef","langSnap","exists","data","console","log","createUser","userData","auth","email","password","error","name","surname","rol","open","duration","navigate","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\boukii\\boukii-admin-panel\\src\\service\\userService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { getAuth } from '@angular/fire/auth';\r\nimport { getFirestore } from '@angular/fire/firestore';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { addDoc, doc, getDoc, updateDoc, collection} from 'firebase/firestore';\r\nimport { createUserWithEmailAndPassword, updatePassword  } from '@angular/fire/auth';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  constructor(private matSnackBar: MatSnackBar, private router: Router) { }\r\n\r\n  async getLangById(langId: string) {\r\n    const db = getFirestore();\r\n\r\n    const langRef = doc(db, 'users', langId);\r\n    const langSnap = await getDoc(langRef);\r\n\r\n    if (langSnap.exists()) {\r\n      return langSnap.data();\r\n    } else {\r\n      console.log('No such document!');\r\n    }\r\n  }\r\n\r\n  async createUser(userData: any) {\r\n    const db = getFirestore();\r\n\r\n    try {\r\n\r\n      try {\r\n        const auth = getAuth();\r\n        await createUserWithEmailAndPassword(auth, userData.email, userData.password);\r\n      } catch (error) {\r\n        console.error('Error during registration:', error);\r\n      }\r\n\r\n      await addDoc(collection(db, 'users'), {name: userData.name, surname: userData.surname, email: userData.email, rol: userData.rol});\r\n\r\n      this.matSnackBar.open(\"El usuario se ha creado correctamente\", 'CERRAR', {duration: 3000});\r\n      this.router.navigate(['user']);\r\n      console.log('User created successfully');\r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}