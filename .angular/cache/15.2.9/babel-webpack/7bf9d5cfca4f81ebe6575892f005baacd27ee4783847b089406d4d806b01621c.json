{"ast":null,"code":"import { Injector } from '@angular/core';\nimport { OverlayConfig } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { PopoverRef } from './popover-ref';\nimport { PopoverComponent } from './popover.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nexport class PopoverService {\n  constructor(overlay, injector) {\n    this.overlay = overlay;\n    this.injector = injector;\n  }\n  open({\n    origin,\n    content,\n    data,\n    width,\n    height,\n    position,\n    offsetX,\n    offsetY\n  }) {\n    const overlayRef = this.overlay.create(this.getOverlayConfig({\n      origin,\n      width,\n      height,\n      position,\n      offsetX,\n      offsetY\n    }));\n    const popoverRef = new PopoverRef(overlayRef, content, data);\n    const injector = this.createInjector(popoverRef, this.injector);\n    overlayRef.attach(new ComponentPortal(PopoverComponent, null, injector));\n    return popoverRef;\n  }\n  static getPositions() {\n    return [{\n      originX: 'center',\n      originY: 'top',\n      overlayX: 'center',\n      overlayY: 'bottom'\n    }, {\n      originX: 'center',\n      originY: 'bottom',\n      overlayX: 'center',\n      overlayY: 'top'\n    }];\n  }\n  getOverlayConfig({\n    origin,\n    width,\n    height,\n    position,\n    offsetX,\n    offsetY\n  }) {\n    return new OverlayConfig({\n      hasBackdrop: true,\n      width,\n      height,\n      backdropClass: 'popover-backdrop',\n      positionStrategy: this.getOverlayPosition({\n        origin,\n        position,\n        offsetX,\n        offsetY\n      }),\n      scrollStrategy: this.overlay.scrollStrategies.reposition()\n    });\n  }\n  createInjector(popoverRef, injector) {\n    return Injector.create({\n      providers: [{\n        provide: PopoverRef,\n        useValue: popoverRef\n      }],\n      parent: injector\n    });\n  }\n  getOverlayPosition({\n    origin,\n    position,\n    offsetX,\n    offsetY\n  }) {\n    return this.overlay.position().flexibleConnectedTo(origin).withPositions(position || PopoverService.getPositions()).withFlexibleDimensions(true).withDefaultOffsetY(offsetY || 0).withDefaultOffsetX(offsetX || 0).withTransformOriginOn('.vex-popover').withPush(true);\n  }\n}\nPopoverService.ɵfac = function PopoverService_Factory(t) {\n  return new (t || PopoverService)(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.Injector));\n};\nPopoverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PopoverService,\n  factory: PopoverService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Injector","OverlayConfig","ComponentPortal","PopoverRef","PopoverComponent","PopoverService","constructor","overlay","injector","open","origin","content","data","width","height","position","offsetX","offsetY","overlayRef","create","getOverlayConfig","popoverRef","createInjector","attach","getPositions","originX","originY","overlayX","overlayY","hasBackdrop","backdropClass","positionStrategy","getOverlayPosition","scrollStrategy","scrollStrategies","reposition","providers","provide","useValue","parent","flexibleConnectedTo","withPositions","withFlexibleDimensions","withDefaultOffsetY","withDefaultOffsetX","withTransformOriginOn","withPush","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\el-sotano-backoffice\\src\\@vex\\components\\popover\\popover.service.ts"],"sourcesContent":["import { ElementRef, Injectable, Injector } from '@angular/core';\nimport { ConnectionPositionPair, Overlay, OverlayConfig, PositionStrategy } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { PopoverContent, PopoverRef } from './popover-ref';\nimport { PopoverComponent } from './popover.component';\n\nexport interface PopoverParams<T> {\n  width?: string | number;\n  height?: string | number;\n  origin: ElementRef | HTMLElement;\n  position?: ConnectionPositionPair[];\n  content: PopoverContent;\n  data?: T;\n  offsetY?: number;\n  offsetX?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopoverService {\n  constructor(private overlay: Overlay, private injector: Injector) { }\n\n  open<T>({ origin, content, data, width, height, position, offsetX, offsetY }: PopoverParams<T>): PopoverRef<T> {\n    const overlayRef = this.overlay.create(this.getOverlayConfig({ origin, width, height, position, offsetX, offsetY }));\n    const popoverRef = new PopoverRef<T>(overlayRef, content, data);\n\n    const injector = this.createInjector(popoverRef, this.injector);\n    overlayRef.attach(new ComponentPortal(PopoverComponent, null, injector));\n\n    return popoverRef;\n  }\n\n  private static getPositions(): ConnectionPositionPair[] {\n    return [\n      {\n        originX: 'center',\n        originY: 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n      },\n      {\n        originX: 'center',\n        originY: 'bottom',\n        overlayX: 'center',\n        overlayY: 'top',\n      },\n    ];\n  }\n\n  private getOverlayConfig({ origin, width, height, position, offsetX, offsetY }): OverlayConfig {\n    return new OverlayConfig({\n      hasBackdrop: true,\n      width,\n      height,\n      backdropClass: 'popover-backdrop',\n      positionStrategy: this.getOverlayPosition({ origin, position, offsetX, offsetY }),\n      scrollStrategy: this.overlay.scrollStrategies.reposition()\n    });\n  }\n\n  createInjector(popoverRef: PopoverRef, injector: Injector) {\n    return Injector.create({\n      providers: [\n        {\n          provide: PopoverRef,\n          useValue: popoverRef\n        }\n      ],\n      parent: injector\n    });\n  }\n\n  private getOverlayPosition({ origin, position, offsetX, offsetY }): PositionStrategy {\n    return this.overlay.position()\n      .flexibleConnectedTo(origin)\n      .withPositions(position || PopoverService.getPositions())\n      .withFlexibleDimensions(true)\n      .withDefaultOffsetY(offsetY || 0)\n      .withDefaultOffsetX(offsetX || 0)\n      .withTransformOriginOn('.vex-popover')\n      .withPush(true);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}