{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/el-sotano-backoffice/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { signInWithEmailAndPassword, signOut, onAuthStateChanged, getAuth } from '@angular/fire/auth';\nimport { createUserWithEmailAndPassword } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n    this.user = null;\n    const user = JSON.parse(localStorage.getItem('sotanoUser'));\n    if (user) {\n      this.user = user;\n    }\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        this.user = user;\n        localStorage.setItem('sotanoUser', JSON.stringify(user));\n      } else {\n        this.user = null;\n        localStorage.removeItem('sotanoUser');\n      }\n    });\n  }\n  login(email, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const auth = getAuth();\n        const userCredential = yield signInWithEmailAndPassword(auth, email, password);\n        if (userCredential.user) {\n          localStorage.setItem('sotanoUser', JSON.stringify(userCredential.user));\n          _this.router.navigate(['/menu']);\n        }\n      } catch (error) {\n        console.error('Error during login:', error);\n      }\n    })();\n  }\n  register(email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const auth = getAuth();\n        yield createUserWithEmailAndPassword(auth, email, password);\n        _this2.router.navigate(['/menu']);\n      } catch (error) {\n        console.error('Error during registration:', error);\n      }\n    })();\n  }\n  logout() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield signOut(_this3.auth);\n      _this3.user = null;\n      localStorage.removeItem('sotanoUser');\n    })();\n  }\n  isLoggedIn() {\n    return this.user !== null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAeA,0BAA0B,EAAEC,OAAO,EAAEC,kBAAkB,EAAEC,OAAO,QAAQ,oBAAoB;AAG3G,SAASC,8BAA8B,QAAQ,oBAAoB;;;;AAKnE,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAU,EAASC,MAAc;IAAjC,SAAI,GAAJD,IAAI;IAAe,WAAM,GAANC,MAAM;IAF7C,SAAI,GAAgB,IAAI;IAGtB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC3D,IAAIJ,IAAI,EAAE;MACR,IAAI,CAACA,IAAI,GAAGA,IAAI;;IAElBP,kBAAkB,CAACK,IAAI,EAAGE,IAAI,IAAI;MAChC,IAAIA,IAAI,EAAE;QACR,IAAI,CAACA,IAAI,GAAGA,IAAI;QAChBG,YAAY,CAACE,OAAO,CAAC,YAAY,EAAEJ,IAAI,CAACK,SAAS,CAACN,IAAI,CAAC,CAAC;OACzD,MAAM;QACL,IAAI,CAACA,IAAI,GAAG,IAAI;QAChBG,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;;IAEzC,CAAC,CAAC;EACJ;EAEMC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IAAA;IAAA;MACzC,IAAI;QACF,MAAMZ,IAAI,GAAGJ,OAAO,EAAE;QACtB,MAAMiB,cAAc,SAASpB,0BAA0B,CAACO,IAAI,EAAEW,KAAK,EAAEC,QAAQ,CAAC;QAC9E,IAAIC,cAAc,CAACX,IAAI,EAAE;UACvBG,YAAY,CAACE,OAAO,CAAC,YAAY,EAAEJ,IAAI,CAACK,SAAS,CAACK,cAAc,CAACX,IAAI,CAAC,CAAC;UACvE,KAAI,CAACD,MAAM,CAACa,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;OAElC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;IAC5C;EACH;EAEME,QAAQ,CAACN,KAAa,EAAEC,QAAgB;IAAA;IAAA;MAC5C,IAAI;QACF,MAAMZ,IAAI,GAAGJ,OAAO,EAAE;QACtB,MAAMC,8BAA8B,CAACG,IAAI,EAAEW,KAAK,EAAEC,QAAQ,CAAC;QAC3D,MAAI,CAACX,MAAM,CAACa,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;OAChC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;;IACnD;EACH;EAEMG,MAAM;IAAA;IAAA;MACV,MAAMxB,OAAO,CAAC,MAAI,CAACM,IAAI,CAAC;MACxB,MAAI,CAACE,IAAI,GAAG,IAAI;MAChBG,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;IAAC;EACxC;EAEAU,UAAU;IACR,OAAO,IAAI,CAACjB,IAAI,KAAK,IAAI;EAC3B;;AAlDWJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFV;AAAM","names":["signInWithEmailAndPassword","signOut","onAuthStateChanged","getAuth","createUserWithEmailAndPassword","AuthService","constructor","auth","router","user","JSON","parse","localStorage","getItem","setItem","stringify","removeItem","login","email","password","userCredential","navigate","error","console","register","logout","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\el-sotano-backoffice\\src\\service\\AuthService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Auth, signInWithEmailAndPassword, signOut, onAuthStateChanged, getAuth } from '@angular/fire/auth';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '@firebase/auth';\r\nimport { createUserWithEmailAndPassword } from '@angular/fire/auth';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  user: User | null = null;\r\n\r\n  constructor(private auth: Auth,private router: Router) {\r\n    const user = JSON.parse(localStorage.getItem('sotanoUser'));\r\n    if (user) {\r\n      this.user = user;\r\n    }\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        this.user = user;\r\n        localStorage.setItem('sotanoUser', JSON.stringify(user));\r\n      } else {\r\n        this.user = null;\r\n        localStorage.removeItem('sotanoUser');\r\n      }\r\n    });\r\n  }\r\n\r\n  async login(email: string, password: string) {\r\n    try {\r\n      const auth = getAuth();\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      if (userCredential.user) {\r\n        localStorage.setItem('sotanoUser', JSON.stringify(userCredential.user));\r\n        this.router.navigate(['/menu']);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n    }\r\n  }\r\n\r\n  async register(email: string, password: string): Promise<void> {\r\n    try {\r\n      const auth = getAuth();\r\n      await createUserWithEmailAndPassword(auth, email, password);\r\n      this.router.navigate(['/menu']);\r\n    } catch (error) {\r\n      console.error('Error during registration:', error);\r\n    }\r\n  }\r\n\r\n  async logout() {\r\n    await signOut(this.auth);\r\n    this.user = null;\r\n    localStorage.removeItem('sotanoUser');\r\n  }\r\n\r\n  isLoggedIn() {\r\n    return this.user !== null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}