{"ast":null,"code":"import { LOCALE_ID } from '@angular/core';\nimport { Settings } from 'luxon';\nimport { DOCUMENT } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { colorVariables } from '../@vex/components/config-panel/color-variables';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../@vex/config/config.service\";\nimport * as i2 from \"@angular/cdk/platform\";\nimport * as i3 from \"../@vex/services/layout.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../@vex/services/navigation.service\";\nimport * as i6 from \"../@vex/services/splash-screen.service\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/platform-browser\";\nexport class AppComponent {\n  constructor(configService, renderer, platform, document, localeId, layoutService, route, navigationService, splashScreenService, matIconRegistry, domSanitizer) {\n    this.configService = configService;\n    this.renderer = renderer;\n    this.platform = platform;\n    this.document = document;\n    this.localeId = localeId;\n    this.layoutService = layoutService;\n    this.route = route;\n    this.navigationService = navigationService;\n    this.splashScreenService = splashScreenService;\n    this.matIconRegistry = matIconRegistry;\n    this.domSanitizer = domSanitizer;\n    Settings.defaultLocale = this.localeId;\n    if (this.platform.BLINK) {\n      this.renderer.addClass(this.document.body, 'is-blink');\n    }\n    this.matIconRegistry.addSvgIconResolver((name, namespace) => {\n      switch (namespace) {\n        case 'mat':\n          return this.domSanitizer.bypassSecurityTrustResourceUrl(`assets/img/icons/material-design-icons/two-tone/${name}.svg`);\n        case 'logo':\n          return this.domSanitizer.bypassSecurityTrustResourceUrl(`assets/img/icons/logos/${name}.svg`);\n        case 'flag':\n          return this.domSanitizer.bypassSecurityTrustResourceUrl(`assets/img/icons/flags/${name}.svg`);\n      }\n    });\n    /**\r\n     * Customize the template to your needs with the ConfigService\r\n     * Example:\r\n     *  this.configService.updateConfig({\r\n     *    sidenav: {\r\n     *      title: 'Custom App',\r\n     *      imageUrl: '//placehold.it/100x100',\r\n     *      showCollapsePin: false\r\n     *    },\r\n     *    footer: {\r\n     *      visible: false\r\n     *    }\r\n     *  });\r\n     */\n    /**\r\n     * Config Related Subscriptions\r\n     * You can remove this if you don't need the functionality of being able to enable specific configs with queryParams\r\n     * Example: example.com/?layout=apollo&style=default\r\n     */\n    this.route.queryParamMap.subscribe(queryParamMap => {\n      if (queryParamMap.has('layout')) {\n        this.configService.setConfig(queryParamMap.get('layout'));\n      }\n      if (queryParamMap.has('style')) {\n        this.configService.updateConfig({\n          style: {\n            colorScheme: queryParamMap.get('style')\n          }\n        });\n      }\n      if (queryParamMap.has('primaryColor')) {\n        const color = colorVariables[queryParamMap.get('primaryColor')];\n        if (color) {\n          this.configService.updateConfig({\n            style: {\n              colors: {\n                primary: color\n              }\n            }\n          });\n        }\n      }\n      if (queryParamMap.has('rtl')) {\n        this.configService.updateConfig({\n          direction: coerceBooleanProperty(queryParamMap.get('rtl')) ? 'rtl' : 'ltr'\n        });\n      }\n    });\n    /**\r\n     * Add your own routes here\r\n     */\n    this.navigationService.items = [\n    /*{\r\n      type: 'link',\r\n      label: 'Dashboard',\r\n      route: '/dashboard',\r\n      icon: 'mat:insights',\r\n      routerLinkActiveOptions: { exact: true }\r\n    },*/\n    {\n      type: 'link',\n      label: '',\n      route: '',\n      icon: '',\n      routerLinkActiveOptions: {\n        exact: true\n      }\n    }, {\n      type: 'link',\n      label: 'Menu',\n      route: '/menu',\n      icon: 'mat:restaurant_menu',\n      routerLinkActiveOptions: {\n        exact: true\n      }\n    }, {\n      type: 'link',\n      label: 'Idiomas',\n      route: '/language',\n      icon: 'mat:language',\n      routerLinkActiveOptions: {\n        exact: true\n      }\n    }\n    /*{\r\n      type: 'subheading',\r\n      label: 'Dashboards',\r\n      children: [\r\n        {\r\n          type: 'link',\r\n          label: 'Analytics',\r\n          route: '/dashboard',\r\n          icon: 'mat:insights',\r\n          routerLinkActiveOptions: { exact: true }\r\n        }\r\n      ]\r\n    }*/];\n  }\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ConfigService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(LOCALE_ID), i0.ɵɵdirectiveInject(i3.LayoutService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i5.NavigationService), i0.ɵɵdirectiveInject(i6.SplashScreenService), i0.ɵɵdirectiveInject(i7.MatIconRegistry), i0.ɵɵdirectiveInject(i8.DomSanitizer));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"vex-root\"]],\n  decls: 1,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"router-outlet\");\n    }\n  },\n  dependencies: [i4.RouterOutlet],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["LOCALE_ID","Settings","DOCUMENT","coerceBooleanProperty","colorVariables","AppComponent","constructor","configService","renderer","platform","document","localeId","layoutService","route","navigationService","splashScreenService","matIconRegistry","domSanitizer","defaultLocale","BLINK","addClass","body","addSvgIconResolver","name","namespace","bypassSecurityTrustResourceUrl","queryParamMap","subscribe","has","setConfig","get","updateConfig","style","colorScheme","color","colors","primary","direction","items","type","label","icon","routerLinkActiveOptions","exact","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["D:\\Projects\\el-sotano-backoffice\\src\\app\\app.component.ts","D:\\Projects\\el-sotano-backoffice\\src\\app\\app.component.html"],"sourcesContent":["import { Component, Inject, LOCALE_ID, Renderer2 } from '@angular/core';\nimport { ConfigService } from '../@vex/config/config.service';\nimport { Settings } from 'luxon';\nimport { DOCUMENT } from '@angular/common';\nimport { Platform } from '@angular/cdk/platform';\nimport { NavigationService } from '../@vex/services/navigation.service';\nimport { LayoutService } from '../@vex/services/layout.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SplashScreenService } from '../@vex/services/splash-screen.service';\nimport { VexConfigName } from '../@vex/config/config-name.model';\nimport { ColorSchemeName } from '../@vex/config/colorSchemeName';\nimport { MatIconRegistry, SafeResourceUrlWithIconOptions } from '@angular/material/icon';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { ColorVariable, colorVariables } from '../@vex/components/config-panel/color-variables';\n\n@Component({\n  selector: 'vex-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(private configService: ConfigService,\n              private renderer: Renderer2,\n              private platform: Platform,\n              @Inject(DOCUMENT) private document: Document,\n              @Inject(LOCALE_ID) private localeId: string,\n              private layoutService: LayoutService,\n              private route: ActivatedRoute,\n              private navigationService: NavigationService,\n              private splashScreenService: SplashScreenService,\n              private readonly matIconRegistry: MatIconRegistry,\n              private readonly domSanitizer: DomSanitizer) {\n    Settings.defaultLocale = this.localeId;\n\n    if (this.platform.BLINK) {\n      this.renderer.addClass(this.document.body, 'is-blink');\n    }\n\n    this.matIconRegistry.addSvgIconResolver(\n      (\n        name: string,\n        namespace: string\n      ): SafeResourceUrl | SafeResourceUrlWithIconOptions | null => {\n        switch (namespace) {\n          case 'mat':\n            return this.domSanitizer.bypassSecurityTrustResourceUrl(\n              `assets/img/icons/material-design-icons/two-tone/${name}.svg`\n            );\n\n          case 'logo':\n            return this.domSanitizer.bypassSecurityTrustResourceUrl(\n              `assets/img/icons/logos/${name}.svg`\n            );\n\n          case 'flag':\n            return this.domSanitizer.bypassSecurityTrustResourceUrl(\n              `assets/img/icons/flags/${name}.svg`\n            );\n        }\n      }\n    );\n\n    /**\n     * Customize the template to your needs with the ConfigService\n     * Example:\n     *  this.configService.updateConfig({\n     *    sidenav: {\n     *      title: 'Custom App',\n     *      imageUrl: '//placehold.it/100x100',\n     *      showCollapsePin: false\n     *    },\n     *    footer: {\n     *      visible: false\n     *    }\n     *  });\n     */\n\n    /**\n     * Config Related Subscriptions\n     * You can remove this if you don't need the functionality of being able to enable specific configs with queryParams\n     * Example: example.com/?layout=apollo&style=default\n     */\n    this.route.queryParamMap.subscribe(queryParamMap => {\n      if (queryParamMap.has('layout')) {\n        this.configService.setConfig(queryParamMap.get('layout') as VexConfigName);\n      }\n\n      if (queryParamMap.has('style')) {\n        this.configService.updateConfig({\n          style: {\n            colorScheme: queryParamMap.get('style') as ColorSchemeName\n          }\n        });\n      }\n\n      if (queryParamMap.has('primaryColor')) {\n        const color: ColorVariable = colorVariables[queryParamMap.get('primaryColor')];\n\n        if (color) {\n          this.configService.updateConfig({\n            style: {\n              colors: {\n                primary: color\n              }\n            }\n          });\n        }\n      }\n\n      if (queryParamMap.has('rtl')) {\n        this.configService.updateConfig({\n          direction: coerceBooleanProperty(queryParamMap.get('rtl')) ? 'rtl' : 'ltr'\n        });\n      }\n    });\n\n    /**\n     * Add your own routes here\n     */\n    this.navigationService.items = [\n      /*{\n        type: 'link',\n        label: 'Dashboard',\n        route: '/dashboard',\n        icon: 'mat:insights',\n        routerLinkActiveOptions: { exact: true }\n      },*/{\n        type: 'link',\n        label: '',\n        route: '',\n        icon: '',\n        routerLinkActiveOptions: { exact: true }\n      },{\n        type: 'link',\n        label: 'Menu',\n        route: '/menu',\n        icon: 'mat:restaurant_menu',\n        routerLinkActiveOptions: { exact: true }\n      },\n      {\n        type: 'link',\n        label: 'Idiomas',\n        route: '/language',\n        icon: 'mat:language',\n        routerLinkActiveOptions: { exact: true }\n      },\n      /*{\n        type: 'subheading',\n        label: 'Dashboards',\n        children: [\n          {\n            type: 'link',\n            label: 'Analytics',\n            route: '/dashboard',\n            icon: 'mat:insights',\n            routerLinkActiveOptions: { exact: true }\n          }\n        ]\n      }*/\n    ];\n  }\n}\n","<router-outlet></router-outlet>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}