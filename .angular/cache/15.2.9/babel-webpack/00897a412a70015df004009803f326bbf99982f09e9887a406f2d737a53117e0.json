{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Directive, Inject, Optional, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { PRIMARY_OUTLET } from '@angular/router';\nimport { EMPTY } from 'rxjs';\n\n// Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\nconst globalRegistry = [];\nclass PrefetchRegistry {\n  constructor(router) {\n    this.router = router;\n    this.trees = globalRegistry;\n  }\n  add(tree) {\n    this.trees.push(tree);\n  }\n  shouldPrefetch(url) {\n    const tree = this.router.parseUrl(url);\n    return this.trees.some(containsTree.bind(null, tree));\n  }\n}\nPrefetchRegistry.ɵfac = function PrefetchRegistry_Factory(t) {\n  return new (t || PrefetchRegistry)(i0.ɵɵinject(i1.Router));\n};\nPrefetchRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PrefetchRegistry,\n  factory: PrefetchRegistry.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PrefetchRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Router\n    }];\n  }, null);\n})();\nfunction containsQueryParams(container, containee) {\n  // TODO: This does not handle array params correctly.\n  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(key => containee[key] === container[key]);\n}\nfunction containsTree(containee, container) {\n  return containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root, containee.root.segments);\n}\nfunction containsSegmentGroup(container, containee, containeePaths) {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!containee.hasChildren()) return true;\n    for (const c in containee.children) {\n      if (!container.children[c]) break;\n      if (containsSegmentGroup(container.children[c], containee.children[c], containee.children[c].segments)) return true;\n    }\n    return false;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\nfunction equalPath(as, bs) {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':'));\n}\nconst requestIdleCallback = typeof window !== 'undefined' ? window.requestIdleCallback || function (cb) {\n  const start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n} : () => {};\nconst observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;\nconst LinkHandler = new InjectionToken('LinkHandler');\nclass ObservableLinkHandler {\n  constructor(loader, registry, ngZone) {\n    this.loader = loader;\n    this.registry = registry;\n    this.ngZone = ngZone;\n    this.elementLink = new Map();\n    this.observer = observerSupported() ? new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (!this.observer) {\n          return;\n        }\n        if (entry.isIntersecting) {\n          const link = entry.target;\n          const routerLink = this.elementLink.get(link);\n          if (!routerLink || !routerLink.urlTree) return;\n          this.registry.add(routerLink.urlTree);\n          this.observer.unobserve(link);\n          requestIdleCallback(() => {\n            this.loader.preload().subscribe(() => void 0);\n          });\n        }\n      });\n    }) : null;\n  }\n  register(el) {\n    this.elementLink.set(el.element, el);\n    this.ngZone.runOutsideAngular(() => {\n      if (!this.observer) {\n        return;\n      }\n      this.observer.observe(el.element);\n    });\n  }\n  // First call to unregister will not hit this.\n  unregister(el) {\n    if (!this.observer) {\n      return;\n    }\n    if (this.elementLink.has(el.element)) {\n      this.observer.unobserve(el.element);\n      this.elementLink.delete(el.element);\n    }\n  }\n  supported() {\n    return observerSupported();\n  }\n}\nObservableLinkHandler.ɵfac = function ObservableLinkHandler_Factory(t) {\n  return new (t || ObservableLinkHandler)(i0.ɵɵinject(i1.RouterPreloader), i0.ɵɵinject(PrefetchRegistry), i0.ɵɵinject(i0.NgZone));\n};\nObservableLinkHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ObservableLinkHandler,\n  factory: ObservableLinkHandler.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ObservableLinkHandler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RouterPreloader\n    }, {\n      type: PrefetchRegistry\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass PreloadLinkHandler {\n  constructor(loader, registry) {\n    this.loader = loader;\n    this.registry = registry;\n  }\n  register(el) {\n    this.registry.add(el.urlTree);\n    requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n  }\n  unregister(_) {}\n  supported() {\n    return true;\n  }\n}\nPreloadLinkHandler.ɵfac = function PreloadLinkHandler_Factory(t) {\n  return new (t || PreloadLinkHandler)(i0.ɵɵinject(i1.RouterPreloader), i0.ɵɵinject(PrefetchRegistry));\n};\nPreloadLinkHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PreloadLinkHandler,\n  factory: PreloadLinkHandler.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PreloadLinkHandler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RouterPreloader\n    }, {\n      type: PrefetchRegistry\n    }];\n  }, null);\n})();\nclass LinkDirective {\n  constructor(linkHandlers, el, link, linkWithHref) {\n    this.linkHandlers = linkHandlers;\n    this.el = el;\n    this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n    this.rl = link || linkWithHref;\n    if (this.element && this.element.setAttribute) {\n      this.element.setAttribute('ngx-ql', '');\n    }\n  }\n  ngOnChanges(c) {\n    if (c['routerLink'] && this.linkHandler) {\n      this.linkHandler.unregister(this);\n      this.linkHandler.register(this);\n    }\n  }\n  ngOnDestroy() {\n    if (!this.linkHandler) {\n      return;\n    }\n    this.linkHandler.unregister(this);\n  }\n  get element() {\n    return this.el.nativeElement;\n  }\n  get urlTree() {\n    return this.rl.urlTree;\n  }\n}\nLinkDirective.ɵfac = function LinkDirective_Factory(t) {\n  return new (t || LinkDirective)(i0.ɵɵdirectiveInject(LinkHandler), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.RouterLink, 8), i0.ɵɵdirectiveInject(i1.RouterLink, 8));\n};\nLinkDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LinkDirective,\n  selectors: [[\"\", \"routerLink\", \"\"]],\n  inputs: {\n    routerLink: \"routerLink\"\n  },\n  standalone: true,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LinkDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[routerLink]',\n      standalone: true\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LinkHandler]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.RouterLink,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i1.RouterLink,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    routerLink: [{\n      type: Input\n    }]\n  });\n})();\nclass QuicklinkStrategy {\n  constructor(registry, router) {\n    this.registry = registry;\n    this.router = router;\n    this.loading = new Set();\n  }\n  preload(route, load) {\n    if (this.loading.has(route)) {\n      // Don't preload the same route twice\n      return EMPTY;\n    }\n    const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;\n    if (conn) {\n      // Don't preload if the user is on 2G. or if Save-Data is enabled..\n      if ((conn.effectiveType || '').includes('2g') || conn.saveData) return EMPTY;\n    }\n    // Prevent from preloading\n    if (route.data && route.data['preload'] === false) {\n      return EMPTY;\n    }\n    const fullPath = findPath(this.router.config, route);\n    if (this.registry.shouldPrefetch(fullPath)) {\n      this.loading.add(route);\n      return load();\n    }\n    return EMPTY;\n  }\n}\nQuicklinkStrategy.ɵfac = function QuicklinkStrategy_Factory(t) {\n  return new (t || QuicklinkStrategy)(i0.ɵɵinject(PrefetchRegistry), i0.ɵɵinject(i1.Router));\n};\nQuicklinkStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: QuicklinkStrategy,\n  factory: QuicklinkStrategy.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuicklinkStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: PrefetchRegistry\n    }, {\n      type: i1.Router\n    }];\n  }, null);\n})();\nconst findPath = (config, route) => {\n  config = config.slice();\n  const parent = new Map();\n  const visited = new Set();\n  while (config.length) {\n    const el = config.shift();\n    if (!el) {\n      continue;\n    }\n    visited.add(el);\n    if (el === route) break;\n    let children = el.children || [];\n    const current = el._loadedRoutes || [];\n    for (const route of current) {\n      if (route && route.children) {\n        children = children.concat(route.children);\n      }\n      children.forEach(r => {\n        if (visited.has(r)) return;\n        parent.set(r, el);\n        config.push(r);\n      });\n    }\n  }\n  let path = '';\n  let current = route;\n  while (current) {\n    if (isPrimaryRoute(current)) {\n      path = `/${current.path}${path}`;\n    } else {\n      path = `/(${current.outlet}:${current.path}${path})`;\n    }\n    current = parent.get(current);\n  }\n  return path.replace(/\\/\\//, '/');\n};\nfunction isPrimaryRoute(route) {\n  return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\nconst quicklinkProviders = [{\n  provide: LinkHandler,\n  useClass: ObservableLinkHandler,\n  multi: true\n}, {\n  provide: LinkHandler,\n  useClass: PreloadLinkHandler,\n  multi: true\n}, PrefetchRegistry, QuicklinkStrategy];\nclass QuicklinkModule {}\nQuicklinkModule.ɵfac = function QuicklinkModule_Factory(t) {\n  return new (t || QuicklinkModule)();\n};\nQuicklinkModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QuicklinkModule\n});\nQuicklinkModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: quicklinkProviders\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuicklinkModule, [{\n    type: NgModule,\n    args: [{\n      imports: [LinkDirective],\n      exports: [LinkDirective],\n      providers: quicklinkProviders\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-quicklink\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LinkDirective as QuicklinkDirective, QuicklinkModule, QuicklinkStrategy, quicklinkProviders };","map":{"version":3,"names":["i0","Injectable","InjectionToken","Directive","Inject","Optional","Input","NgModule","i1","PRIMARY_OUTLET","EMPTY","globalRegistry","PrefetchRegistry","constructor","router","trees","add","tree","push","shouldPrefetch","url","parseUrl","some","containsTree","bind","ɵfac","Router","ɵprov","type","args","providedIn","containsQueryParams","container","containee","Object","keys","length","every","key","queryParams","containsSegmentGroup","root","segments","containeePaths","current","slice","equalPath","hasChildren","c","children","next","as","bs","a","i","path","startsWith","requestIdleCallback","window","cb","start","Date","now","setTimeout","didTimeout","timeRemaining","Math","max","observerSupported","IntersectionObserver","LinkHandler","ObservableLinkHandler","loader","registry","ngZone","elementLink","Map","observer","entries","forEach","entry","isIntersecting","link","target","routerLink","get","urlTree","unobserve","preload","subscribe","register","el","set","element","runOutsideAngular","observe","unregister","has","delete","supported","RouterPreloader","NgZone","PreloadLinkHandler","_","LinkDirective","linkHandlers","linkWithHref","linkHandler","filter","h","shift","rl","setAttribute","ngOnChanges","ngOnDestroy","nativeElement","ElementRef","RouterLink","ɵdir","selector","standalone","undefined","decorators","QuicklinkStrategy","loading","Set","route","load","conn","navigator","connection","effectiveType","includes","saveData","data","fullPath","findPath","config","parent","visited","_loadedRoutes","concat","r","isPrimaryRoute","outlet","replace","quicklinkProviders","provide","useClass","multi","QuicklinkModule","ɵmod","ɵinj","imports","exports","providers","QuicklinkDirective"],"sources":["D:/Projects/el-sotano-backoffice/node_modules/ngx-quicklink/fesm2020/ngx-quicklink.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Directive, Inject, Optional, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { PRIMARY_OUTLET } from '@angular/router';\nimport { EMPTY } from 'rxjs';\n\n// Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\nconst globalRegistry = [];\nclass PrefetchRegistry {\n    constructor(router) {\n        this.router = router;\n        this.trees = globalRegistry;\n    }\n    add(tree) {\n        this.trees.push(tree);\n    }\n    shouldPrefetch(url) {\n        const tree = this.router.parseUrl(url);\n        return this.trees.some(containsTree.bind(null, tree));\n    }\n}\nPrefetchRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: PrefetchRegistry, deps: [{ token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nPrefetchRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: PrefetchRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: PrefetchRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Router }]; } });\nfunction containsQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return (Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(key => containee[key] === container[key]));\n}\nfunction containsTree(containee, container) {\n    return (containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root, containee.root.segments));\n}\nfunction containsSegmentGroup(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        const current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        if (!containee.hasChildren())\n            return true;\n        for (const c in containee.children) {\n            if (!container.children[c])\n                break;\n            if (containsSegmentGroup(container.children[c], containee.children[c], containee.children[c].segments))\n                return true;\n        }\n        return false;\n    }\n    else {\n        const current = containeePaths.slice(0, container.segments.length);\n        const next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\nfunction equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every((a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':'));\n}\n\nconst requestIdleCallback = typeof window !== 'undefined'\n    ? window.requestIdleCallback ||\n        function (cb) {\n            const start = Date.now();\n            return setTimeout(function () {\n                cb({\n                    didTimeout: false,\n                    timeRemaining: function () {\n                        return Math.max(0, 50 - (Date.now() - start));\n                    }\n                });\n            }, 1);\n        }\n    : () => { };\nconst observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;\nconst LinkHandler = new InjectionToken('LinkHandler');\nclass ObservableLinkHandler {\n    constructor(loader, registry, ngZone) {\n        this.loader = loader;\n        this.registry = registry;\n        this.ngZone = ngZone;\n        this.elementLink = new Map();\n        this.observer = observerSupported()\n            ? new IntersectionObserver(entries => {\n                entries.forEach(entry => {\n                    if (!this.observer) {\n                        return;\n                    }\n                    if (entry.isIntersecting) {\n                        const link = entry.target;\n                        const routerLink = this.elementLink.get(link);\n                        if (!routerLink || !routerLink.urlTree)\n                            return;\n                        this.registry.add(routerLink.urlTree);\n                        this.observer.unobserve(link);\n                        requestIdleCallback(() => {\n                            this.loader.preload().subscribe(() => void 0);\n                        });\n                    }\n                });\n            })\n            : null;\n    }\n    register(el) {\n        this.elementLink.set(el.element, el);\n        this.ngZone.runOutsideAngular(() => {\n            if (!this.observer) {\n                return;\n            }\n            this.observer.observe(el.element);\n        });\n    }\n    // First call to unregister will not hit this.\n    unregister(el) {\n        if (!this.observer) {\n            return;\n        }\n        if (this.elementLink.has(el.element)) {\n            this.observer.unobserve(el.element);\n            this.elementLink.delete(el.element);\n        }\n    }\n    supported() {\n        return observerSupported();\n    }\n}\nObservableLinkHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: ObservableLinkHandler, deps: [{ token: i1.RouterPreloader }, { token: PrefetchRegistry }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nObservableLinkHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: ObservableLinkHandler, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: ObservableLinkHandler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.RouterPreloader }, { type: PrefetchRegistry }, { type: i0.NgZone }]; } });\nclass PreloadLinkHandler {\n    constructor(loader, registry) {\n        this.loader = loader;\n        this.registry = registry;\n    }\n    register(el) {\n        this.registry.add(el.urlTree);\n        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n    }\n    unregister(_) { }\n    supported() {\n        return true;\n    }\n}\nPreloadLinkHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: PreloadLinkHandler, deps: [{ token: i1.RouterPreloader }, { token: PrefetchRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nPreloadLinkHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: PreloadLinkHandler, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: PreloadLinkHandler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.RouterPreloader }, { type: PrefetchRegistry }]; } });\n\nclass LinkDirective {\n    constructor(linkHandlers, el, link, linkWithHref) {\n        this.linkHandlers = linkHandlers;\n        this.el = el;\n        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n        this.rl = link || linkWithHref;\n        if (this.element && this.element.setAttribute) {\n            this.element.setAttribute('ngx-ql', '');\n        }\n    }\n    ngOnChanges(c) {\n        if (c['routerLink'] && this.linkHandler) {\n            this.linkHandler.unregister(this);\n            this.linkHandler.register(this);\n        }\n    }\n    ngOnDestroy() {\n        if (!this.linkHandler) {\n            return;\n        }\n        this.linkHandler.unregister(this);\n    }\n    get element() {\n        return this.el.nativeElement;\n    }\n    get urlTree() {\n        return this.rl.urlTree;\n    }\n}\nLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: LinkDirective, deps: [{ token: LinkHandler }, { token: i0.ElementRef }, { token: i1.RouterLink, optional: true }, { token: i1.RouterLink, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.3\", type: LinkDirective, isStandalone: true, selector: \"[routerLink]\", inputs: { routerLink: \"routerLink\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: LinkDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[routerLink]',\n                    standalone: true\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LinkHandler]\n                }] }, { type: i0.ElementRef }, { type: i1.RouterLink, decorators: [{\n                    type: Optional\n                }] }, { type: i1.RouterLink, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { routerLink: [{\n                type: Input\n            }] } });\n\nclass QuicklinkStrategy {\n    constructor(registry, router) {\n        this.registry = registry;\n        this.router = router;\n        this.loading = new Set();\n    }\n    preload(route, load) {\n        if (this.loading.has(route)) {\n            // Don't preload the same route twice\n            return EMPTY;\n        }\n        const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;\n        if (conn) {\n            // Don't preload if the user is on 2G. or if Save-Data is enabled..\n            if ((conn.effectiveType || '').includes('2g') || conn.saveData)\n                return EMPTY;\n        }\n        // Prevent from preloading\n        if (route.data && route.data['preload'] === false) {\n            return EMPTY;\n        }\n        const fullPath = findPath(this.router.config, route);\n        if (this.registry.shouldPrefetch(fullPath)) {\n            this.loading.add(route);\n            return load();\n        }\n        return EMPTY;\n    }\n}\nQuicklinkStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: QuicklinkStrategy, deps: [{ token: PrefetchRegistry }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nQuicklinkStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: QuicklinkStrategy, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: QuicklinkStrategy, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: PrefetchRegistry }, { type: i1.Router }]; } });\nconst findPath = (config, route) => {\n    config = config.slice();\n    const parent = new Map();\n    const visited = new Set();\n    while (config.length) {\n        const el = config.shift();\n        if (!el) {\n            continue;\n        }\n        visited.add(el);\n        if (el === route)\n            break;\n        let children = el.children || [];\n        const current = el._loadedRoutes || [];\n        for (const route of current) {\n            if (route && route.children) {\n                children = children.concat(route.children);\n            }\n            children.forEach((r) => {\n                if (visited.has(r))\n                    return;\n                parent.set(r, el);\n                config.push(r);\n            });\n        }\n    }\n    let path = '';\n    let current = route;\n    while (current) {\n        if (isPrimaryRoute(current)) {\n            path = `/${current.path}${path}`;\n        }\n        else {\n            path = `/(${current.outlet}:${current.path}${path})`;\n        }\n        current = parent.get(current);\n    }\n    return path.replace(/\\/\\//, '/');\n};\nfunction isPrimaryRoute(route) {\n    return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\n\nconst quicklinkProviders = [\n    {\n        provide: LinkHandler,\n        useClass: ObservableLinkHandler,\n        multi: true,\n    },\n    {\n        provide: LinkHandler,\n        useClass: PreloadLinkHandler,\n        multi: true,\n    },\n    PrefetchRegistry,\n    QuicklinkStrategy,\n];\nclass QuicklinkModule {\n}\nQuicklinkModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: QuicklinkModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQuicklinkModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.3\", ngImport: i0, type: QuicklinkModule, imports: [LinkDirective], exports: [LinkDirective] });\nQuicklinkModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: QuicklinkModule, providers: quicklinkProviders });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.3\", ngImport: i0, type: QuicklinkModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [LinkDirective],\n                    exports: [LinkDirective],\n                    providers: quicklinkProviders,\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-quicklink\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LinkDirective as QuicklinkDirective, QuicklinkModule, QuicklinkStrategy, quicklinkProviders };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}